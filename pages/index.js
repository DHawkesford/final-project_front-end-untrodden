import Head from 'next/head'
import Image from 'next/image'
import CardDisplay from '../Components/Card Display/cardDisplay'
import styles from '../styles/Home.module.css'
import Map from '../Components/map'
import FilterBar from '../Components/Filter Bar/filterBar'
import dynamic from 'next/dynamic'
import React, { useEffect, useState } from 'react'
//import CategoryFilter from '../Components/Category Filter/categoryFilter'
 


const MapComponent = dynamic(() => import("../Components/map.js"), {
    loading: () => "Loading...",
    ssr: false
  });





export default function Home() {

  const [categoryState, setCategoryState] = useState("")
  const [allLocationData , setAllLocationData] = useState([])
  const[displayedData,setDisplayedData]= useState([])
 

  useEffect(() => {
    const fetchData = async () => {
      const url = `https://untrodden.herokuapp.com/locations`;
      try {
        const response = await fetch(url);
        const data = await response.json();
        setAllLocationData(data.payload);
        setDisplayedData(data.payload)
              } catch (error) {
        console.log('error', error);
      }
    }
    fetchData()
  } ,[])



  function onChangeCategoryState(event){
    // let selectedCategory = document.getElementById("category").value
      // setCategoryState("")
      // console.log(event)
      console.log(event.target.value);
      setCategoryState(event.target.value)
      // console.log(categoryState)
    //if alllocatoindata.    
  setDisplayedData([...allLocationData.filter(location =>location.categories.includes(event.target.value))])

// filteredLocations()
}


function filteredLocations(){
  let filteredLocations = [...allLocationData]

  let finalLocations = [...filteredLocations.filter(location =>location.categories.includes(categoryState))]
{/*
  allLocationData.map(location => {if (location.categories.includes(categoryState)){
  filteredLocations.push(location)
}})
*/}
console.log(finalLocations)
  setDisplayedData(finalLocations)
 
}



 let category = [
  {value:"category_seaside", label:"Seaside"} ,
  {value:"category_castles", label:"Castles"},
  {value:"category_caves", label:"Caves"},
  {value:"category_peaceful", label:"Peaceful"},
  {value:"category_hiking", label:"Hiking"},
  {value:"category_hills", label:"Hills"},
  {value:"category_historic", label:"Historic"},
  {value:"category_secluded", label:"Secluded"},
  {value:"category_casual", label:"Casual"},
  {value:"category_lakes", label:"Lake"},
  {value:"category_woods", label:"Woods"},
  {value:"category_busy", label:"Busy"},
]


  console.log(allLocationData)


  return (
    <div className={styles.container}>
      <Head>
        <title>Untrodden</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
            <div> 
          <select className={styles.dropdown} id="category" onChange={onChangeCategoryState} value={categoryState}>
          <option value="0">Category:</option>
          {category.map(cat =><option key={cat.value} value={cat.value}>{cat.label}</option>)}
            </select>
        </div>
     {/* <FilterBar/>*/}
         <main className={styles.main}>
        <section>
          <MapComponent allLocationData={displayedData}/>
        </section>
        <section>
        <CardDisplay allLocationData={displayedData}/>
    </section>

    </main>



      
    </div>
  )
}


