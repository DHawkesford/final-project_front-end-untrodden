import React, { useEffect, useState } from "react";
import Head from "next/head";
import dynamic from "next/dynamic";


// css
import styles from "../styles/Home.module.css";

// components
import Button from "../Components/Button/button";
import CardDisplay from "../Components/Card Display/cardDisplay";
import CategoryFilter from "../Components/Category Filter/categoryFilter";
import RegionFilter from "../Components/Region Filter/regionFilter";
import AmenityFilter from "../Components/Amenity Filter/amenityFilter";
import LocationFilter from "../Components/Location Filter/locationFilter";




const MapComponent = dynamic(() => import("../Components/map.js"), {
  loading: () => "Loading...",
  ssr: false,
});

// states
export default function Home() {

  const [categoryState, setCategoryState] = useState("");
  const [allLocationData, setAllLocationData] = useState([]);
  const [displayedData, setDisplayedData] = useState([]);
  const [regionState, setRegionState] = useState("");

  const [amenityState, setAmenityState] = useState([]);
  const [searchState, setSearchState] = useState("");

  // fetch and display all data from backend
  useEffect(() => {
    const fetchData = async () => {
      const url = `https://untrodden.herokuapp.com/locations`;
      try {
        const response = await fetch(url);
        const data = await response.json();
        setAllLocationData(data.payload);
        setDisplayedData(data.payload);
      } catch (error) {
        console.log("error", error);
      }
    };


    fetchData();
  }, []);

  function clearFilter() {
    // restting the filters to their default value
    setRegionState("");
    setCategoryState("");
    setAmenityState([]);
    setSearchState("");
    // setting the dispayedData to all the data retrieved from the API
    setDisplayedData(allLocationData);
  }

  function handleFilter() {
    let allData = allLocationData;

    // filter for region (an empty string is falsy)
    if (regionState) {
      allData = allData.filter((location) => location.region === regionState);
    }
    // filter for category
    if (categoryState) {
      allData = allData.filter((location) =>
        location.categories.includes(categoryState)
      );
    }

    // filter for amenities
    if (amenityState) {
      allData = allData.filter((location) =>
        amenityState.every((amenity) => location.amenities.includes(amenity))
      );
    }

    // setting displayedData as the filtered Data (by region, category, and amenity)
    setDisplayedData(allData);

  }

  return (
    <div className={styles.container}>
      <Head>
        <title>Untrodden</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <section className={styles.filter_bar}>

        <RegionFilter setRegionState={setRegionState} value={regionState} />
        <CategoryFilter setCategoryState={setCategoryState} value={categoryState} />
        <AmenityFilter setAmenityState={setAmenityState} value={amenityState} />
        <Button onClick={() => handleFilter()}  label="Apply Filter" />
        <Button onClick={() => clearFilter()} label="Clear Filter" />
        <LocationFilter
          setSearchState={setSearchState}
          setDisplayedData={setDisplayedData}
          options={allLocationData}
          value={searchState}
        />

      </section>

      <main className={styles.main}>
        <section>
          <MapComponent allLocationData={displayedData} />
        </section>
        <section>
          <CardDisplay allLocationData={displayedData} />
        </section>
      </main>
    </div>
  );
}
