import React, { useEffect, useState } from 'react';
import Head from 'next/head';
import dynamic from 'next/dynamic';

// css
import styles from '../styles/Locations.module.css';

// components

import Button from "../Components/Button/button";
import CardDisplay from "../Components/Card Display/cardDisplay";
import CategoryFilter from "../Components/Category Filter/categoryFilter";
import RegionFilter from "../Components/Region Filter/regionFilter";
import AmenityFilter from "../Components/Amenity Filter/amenityFilter";
import LocationFilter from "../Components/Location Filter/locationFilter";
import MyCarousel from '../Components/carousel';
//import MobileFilterBar from '../Components/Mobile Filter Bar/mobileFilterBar';
import Box from '@mui/material/Box';
import Dialog from '@mui/material/Dialog';
import DialogActions from '@mui/material/DialogActions';
import DialogContent from '@mui/material/DialogContent';
import DialogTitle from '@mui/material/DialogTitle';
import MuiButton from '@mui/material/Button';
const MapComponent = dynamic(() => import('../Components/map.js'), {
  loading: () => 'Loading...',
  ssr: false,
});

// states
export default function Home() {
  const [categoryState, setCategoryState] = useState('');
  const [allLocationData, setAllLocationData] = useState([]);
  const [displayedData, setDisplayedData] = useState([]);
  const [regionState, setRegionState] = useState('');
  const [amenityState, setAmenityState] = useState([]);
  const [searchState, setSearchState] = useState('');
  const [pending, setPending] = useState(true)
  const [open, setOpen] = React.useState(false);

  // fetch and display all data from backend
  useEffect(() => {
    const fetchData = async () => {
      const url = `https://untrodden-untrodded.herokuapp.com/locations`;
      try {
        const response = await fetch(url);
        const data = await response.json();
        setAllLocationData(data.payload);
        setDisplayedData(data.payload);
        setPending(false)
      } catch (error) {
        console.log('error', error);
        setPending(false)
      }
    };

    fetchData();
  }, []);

  function clearFilter() {
    // restting the filters to their default value
    setRegionState('');
    setCategoryState('');
    setAmenityState([]);
    setSearchState('');
    // setting the dispayedData to all the data retrieved from the API
    setDisplayedData(allLocationData);
    handleClose()
  }

  function handleFilter() {
    let allData = allLocationData;
    handleClose()
    // filter for region (an empty string is falsy)
    if (regionState) {
      allData = allData.filter((location) => location.region === regionState);
    }
    // filter for category
    if (categoryState) {
      allData = allData.filter((location) =>
        location.categories.includes(categoryState)
      );
    }

    // filter for amenities
    if (amenityState) {
      allData = allData.filter((location) =>
        amenityState.every((amenity) => location.amenities.includes(amenity))
      );
    }

    // setting displayedData as the filtered Data (by region, category, and amenity)
    setDisplayedData(allData);
  }

  const handleChange = (event) => {
    setAge(Number(event.target.value) || '');
  };

  const handleClickOpen = () => {
    setOpen(true);
  };

  const handleClose = (event, reason) => {
    if (reason !== 'backdropClick') {
      setOpen(false);
    }
  };

  return (
    <div className={styles.container}>
      <Head>
        <title>Locations | Untrodden </title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <section className={styles.filter_bar}>
        <RegionFilter setRegionState={setRegionState} value={regionState} />
        <CategoryFilter
          setCategoryState={setCategoryState}
          value={categoryState}
        />
        <AmenityFilter setAmenityState={setAmenityState} value={amenityState} />
        <Button onClick={() => handleFilter()} label="Apply Filter" />
        <Button onClick={() => clearFilter()} label="Clear Filter" />
        <LocationFilter
          setSearchState={setSearchState}
          setDisplayedData={setDisplayedData}
          options={allLocationData}
          value={searchState}
        />
      
      </section>

      <main className={styles.main}>
        <section>
          <MapComponent allLocationData={displayedData} />
        </section>
        <section className={styles.card_display}>
          <CardDisplay  allLocationData={displayedData} pending={pending}/>
          </section>
          <div className={styles.mobile_filter}>
      <MuiButton onClick={handleClickOpen} sx={{width:'150px', height: "25px", backgroundColor:'#225544', color: '#E8A941'}}>Filters</MuiButton>
      <Dialog disableEscapeKeyDown open={open} onClose={handleClose} >
        <DialogTitle  >Select Filters</DialogTitle>
        <DialogContent sx={{backgroundColor:'#225544', color: '#E8A941'}}>
          <Box component="form" sx={{height:'200px', backgroundColor: '#225544', display: 'flex', flexDirection: 'column', justifyContent: 'space-evenly'}}>
        <RegionFilter setRegionState={setRegionState} value={regionState}/>
        <CategoryFilter setCategoryState={setCategoryState}
          value={categoryState}/>
        <AmenityFilter setAmenityState={setAmenityState} value={amenityState}/>
          </Box>
        </DialogContent>
        <DialogActions >
          <MuiButton sx={{backgroundColor:'#225544', color: '#E8A941'}} onClick={() => clearFilter()} >Clear</MuiButton>
          <MuiButton sx={{backgroundColor:'#225544', color: '#E8A941'}} onClick={() => handleFilter()} >Apply</MuiButton>
        </DialogActions>
      </Dialog>
    </div>
          <section className={styles.carousel}>
          <MyCarousel  allLocationData={displayedData}/>
        </section>
      </main>
    </div>
  );
}
